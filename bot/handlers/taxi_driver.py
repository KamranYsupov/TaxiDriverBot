from typing import Optional

from aiogram import Router, types, F


from bot.keyboards.inline import get_inline_keyboard
from web.apps.telegram_users.models import TelegramUser, TaxiDriver, Car, TariffDriverRequest

router = Router()


async def is_car_approved_handler(
        callback: types.CallbackQuery,
        car: Optional[Car] = None
):
    if not car:
        taxi_driver: TaxiDriver = await TaxiDriver.objects.aget(
            telegram_id=callback.from_user.id,
        )
        car: Car = await Car.objects.aget(driver=taxi_driver)

    if not car or car.status == Car.DISAPPROVED:
        message_text = '–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∞–≤—Ç–æ'
    elif car.status == Car.WAITING:
        message_text = '–û–∂–∏–¥–∞–π—Ç–µ. –ê–≤—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.'
    else:
        return True

    await callback.message.edit_text(
        message_text,
        reply_markup=get_inline_keyboard(
            buttons={'–ù–∞–∑–∞–¥ üîô': 'menu_driver'}
        )
    )


async def is_tariff_request_approved_handler(
        callback: types.CallbackQuery,
        tariff_request: TariffDriverRequest
):
    if tariff_request.status == Car.APPROVED:
        return True

    if tariff_request.status == Car.WAITING:
        message_text = '–û–∂–∏–¥–∞–π—Ç–µ. –ê–≤—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.'
    else:
        message_text = '–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∞–≤—Ç–æ'

    await callback.message.edit_text(
        message_text,
        reply_markup=get_inline_keyboard(
            buttons={'–ù–∞–∑–∞–¥ üîô': 'menu_driver'}
        )
    )

@router.callback_query(F.data == 'child_chair')
async def child_chair_callback_handler(callback: types.CallbackQuery):
    taxi_driver: TaxiDriver = await TaxiDriver.objects.aget(
        telegram_id=callback.from_user.id,
    )
    car: Car = await Car.objects.aget(driver=taxi_driver)

    if not await is_car_approved_handler(callback, car):
        return

    button_text = '–í–∫–ª—é—á–∏—Ç—å ‚úÖ' if not taxi_driver.child_chair else '–í—ã–∫–ª—é—á–∏—Ç—å ‚ùå'
    message_text = (
        '–î–µ—Ç—Å–∫–æ–µ –∫—Ä–µ—Å–ª–æ: '
        f'<b>{"–≤–∫–ª—é—á–µ–Ω–æ ‚úÖ" if taxi_driver.child_chair else "–≤—ã–∫–ª—é—á–µ–Ω–æ ‚ùå"}</b>'
    )
    buttons = {
        button_text: 'driver_change-child_chair',
        '–ù–∞–∑–∞–¥ üîô': 'menu_driver',
    }

    await callback.message.edit_text(
        message_text,
        reply_markup=get_inline_keyboard(
            buttons=buttons,
            sizes=(1, 1, 1)
        ),
    )


@router.callback_query(F.data == 'is_active')
async def is_active_callback_handler(callback: types.CallbackQuery):
    taxi_driver: TaxiDriver = await TaxiDriver.objects.aget(
        telegram_id=callback.from_user.id,
    )
    car: Car = await Car.objects.aget(driver=taxi_driver)

    if not await is_car_approved_handler(callback, car):
        return

    button_text = '–í–∫–ª—é—á–∏—Ç—å ‚úÖ' if not taxi_driver.is_active else '–í—ã–∫–ª—é—á–∏—Ç—å ‚ùå'
    message_text = (
        '–°–º–µ–Ω–∞: '
        f'<b>{"–≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ" if taxi_driver.is_active else "–≤—ã–∫–ª—é—á–µ–Ω–∞ ‚ùå"}</b>'
    )
    buttons = {
        button_text: 'driver_change-is_active',
        '–ù–∞–∑–∞–¥ üîô': 'menu_driver',
    }

    await callback.message.edit_text(
        message_text,
        reply_markup=get_inline_keyboard(
            buttons=buttons,
            sizes=(1, 1, 1)
        ),
    )


@router.callback_query(F.data.startswith('driver_change-'))
async def driver_change_field_callback_handler(callback: types.CallbackQuery):
    change_field_name = callback.data.split('-')[-1]
    if change_field_name not in ('child_chair', 'is_active'):
        return

    taxi_driver: TaxiDriver = await TaxiDriver.objects.aget(
        telegram_id=callback.from_user.id,
    )
    change_field_value = getattr(taxi_driver, change_field_name)  # –î–æ—Å—Ç–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—è
    setattr(taxi_driver, change_field_name, not change_field_value)  # –ò–∑–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—è

    await taxi_driver.asave()

    if change_field_name == 'child_chair':
        await child_chair_callback_handler(callback)
    elif change_field_name == 'is_active':
        await is_active_callback_handler(callback)


@router.callback_query(F.data == 'driver_tariff')
async def driver_tariff_callback_handler(callback: types.CallbackQuery):
    taxi_driver: TaxiDriver = await TaxiDriver.objects.aget(
        telegram_id=callback.from_user.id,
    )
    if not await is_car_approved_handler(callback):
        return

    buttons = {}
    sizes = (1, ) * (len(TaxiDriver.TARIFF_CHOICES) + 1)

    for tariff in TaxiDriver.TARIFF_CHOICES:
        button_text = tariff[-1]
        if taxi_driver.tariff == tariff[0]:
            button_text += ' ‚úÖ'

        buttons[button_text] = f'request_tariff_{tariff[0]}'


    buttons.update({'–ù–∞–∑–∞–¥ üîô': 'menu_driver',})
    await callback.message.edit_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.',
        reply_markup=get_inline_keyboard(
            buttons=buttons,
            sizes=sizes
        )
    )


@router.callback_query(F.data.startswith('request_tariff_'))
async def request_tariff_callback_handler(callback: types.CallbackQuery):
    tariff = callback.data.split('_')[-1]
    taxi_driver: TaxiDriver = await TaxiDriver.objects.aget(
        telegram_id=callback.from_user.id,
    )
    if taxi_driver.tariff == tariff:
        return

    print(tariff)

    tariff_request_kwargs = dict(
        driver=taxi_driver,
        tariff=tariff,
        status=TariffDriverRequest.WAITING,
    )
    tariff_requests = await TariffDriverRequest.objects.afilter(**tariff_request_kwargs)

    if tariff_requests:
        message_text = '–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.'
    else:
        await TariffDriverRequest.objects.acreate(**tariff_request_kwargs)
        message_text = '‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.'


    await callback.message.edit_text(
        message_text,
        reply_markup=get_inline_keyboard(buttons={'–ù–∞–∑–∞–¥ üîô': 'menu_driver'})
    )










